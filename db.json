{
  "post": [
    {
      "author": "ram",
      "title": "Node JS Best Practices — 2023",
      "description": "Developing a robust, scalable, and efficient system can be daunting. However, understanding the key concepts and components can make the process more manageable. In this blog post, we’ll explore essential system design components such as DNS, load balancing, API Gateway, and more, along with a concise cheat sheet that can help developers design systems of varying complexity.",
      "date": "04/04/2004",
      "content": "bvsdklh olitiourtorutriotur\nkyfluyeiuyy\ndherheof"
    },
    {
      "author": "sam",
      "title": "Node JS Best Practices — 2023",
      "description": "Developing a robust, scalable, and efficient system can be daunting. However, understanding the key concepts and components can make the process more manageable. In this blog post, we’ll explore essential system design components such as DNS, load balancing, API Gateway, and more, along with a concise cheat sheet that can help developers design systems of varying complexity.",
      "date": "04/04/2004",
      "content": "bvsdklh olitiourtorutriotur\nkyfluyeiuyy\ndherheof"
    },
    {
      "author": "sam",
      "title": "Node JS Best Practices — 2023",
      "description": "Developing a robust, scalable, and efficient system can be daunting. However, understanding the key concepts and components can make the process more manageable. In this blog post, we’ll explore essential system design components such as DNS, load balancing, API Gateway, and more, along with a concise cheat sheet that can help developers design systems of varying complexity.",
      "date": "04/04/2004",
      "content": "bvsdklh olitiourtorutriotur\nkyfluyeiuyy\ndherheof"
    },
    {
      "author": "sam",
      "title": "Node JS Best Practices — 2023",
      "description": "Developing a robust, scalable, and efficient system can be daunting. However, understanding the key concepts and components can make the process more manageable. In this blog post, we’ll explore essential system design components such as DNS, load balancing, API Gateway, and more, along with a concise cheat sheet that can help developers design systems of varying complexity.",
      "date": "04/04/2004",
      "content": "bvsdklh olitiourtorutriotur\nkyfluyeiuyy\ndherheof"
    },
    {
      "author": "sam",
      "title": "Node JS Best Practices — 2023",
      "description": "Developing a robust, scalable, and efficient system can be daunting. However, understanding the key concepts and components can make the process more manageable. In this blog post, we’ll explore essential system design components such as DNS, load balancing, API Gateway, and more, along with a concise cheat sheet that can help developers design systems of varying complexity.",
      "date": "04/04/2004",
      "content": "bvsdklh olitiourtorutriotur\nkyfluyeiuyy\ndherheof"
    },
    {
      "id": 1,
      "value": "<p>tffyfytdtydyd</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": []
    },
    {
      "id": 2,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": [
        {
          "id": 0,
          "words": "uyuuryry"
        },
        {
          "id": 0,
          "words": "moon"
        }
      ]
    },
    {
      "id": 3,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": [
        {
          "id": 0,
          "words": "uyuuryry"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        }
      ]
    },
    {
      "id": 5,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": [
        {
          "id": 0,
          "words": "uyuuryry"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        }
      ]
    },
    {
      "id": 9,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": [
        {
          "id": 0,
          "words": "uyuuryry"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        }
      ]
    },
    {
      "id": 77,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "helo",
      "discription": "ftyfytyfy",
      "keywords": [
        {
          "id": 0,
          "words": "uyuuryry"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        },
        {
          "id": 0,
          "words": "moon"
        }
      ]
    },
    {
      "id": 78,
      "value": "<h3><strong>Introduction</strong></h3><p>When working with APIs we oftentimes want to send data to the server for processing. For example, if we have a list of to-dos and want to add to it, perhaps through a form submission, we use POST HTTP requests to send a request with a payload for processing and potential persistence.</p><blockquote><em>In this article, we will learn how to perform POST HTTP requests in React using two commonplace approaches: the Fetch API and Axios. We will also get to know how to do this in functional and class-based components.</em></blockquote><p>Using the Fetch API, sending a POST HTTP request with React is as easy as:</p>",
      "name": "name",
      "title": "the titie",
      "discription": "the discription",
      "keywords": [
        {
          "id": 0,
          "words": "noon"
        },
        {
          "id": 1,
          "words": "kiimh"
        },
        {
          "id": 2,
          "words": "moon"
        },
        {
          "id": 3,
          "words": "kimh"
        }
      ]
    },
    {
      "id": 58,
      "value": "<p>6rrde43s</p>",
      "name": "name",
      "title": "tuyuyttyt",
      "discription": "uygytyftrdrexrxrxeswr",
      "keywords": []
    },
    {
      "id": 69,
      "value": "<p><strong><u>TACTICS TO OVERCOME NEGATIVITY</u></strong></p><p>“Negativity” , yeah you heard it right. The most popular and famous word nowadays. And yes, “Negativity” is an attractive word. It gets attention more easily than positivity.</p><p>Time to explore tactics which help us to overcome negativity.</p><ul><li>Find the place where the negativity begins ( source of negativity, it may be from a person, social media or you are doing it by yourself too)</li><li><br></li><li>After finding out the external factors then its time to keep a full stop for it.</li></ul><p><br></p><p>What if it’s your own internal thoughts creating negativity?</p><p>Let’s check this out with the help of this small activity.</p><p><strong>ACTIVITY TIME:</strong></p><ul><li>Take a piece of paper and pen</li><li><br></li><li>Write down your negative thoughts.</li><li><br></li><li>Now you have two options ( Imagination and past negative experience).</li><li><br></li><li>Just label your thoughts with these two words.</li><li><br></li><li>Think about your negative thoughts and figure out whether you are overvaluing your thoughts or your past experiences forcing you to think negatively.</li><li><br></li><li>After labeling your thoughts, you will be able to find out your internal reasons for negative thinking.</li></ul><p>Don’t force yourself to think positively or focus only on positivity.</p><p>Explore and work with your thoughts and thinking patterns. Prolonged negative thinking and suffering from negativity can be a symptom of depression and anxiety.</p><p>“ negative thoughts are also your thoughts, so feel free to think and find the source of your negative thoughts and gradually reduce the value you are adding to it”.</p>",
      "name": "Dhanush",
      "title": "TACTICS TO OVERCOME NEGATIVITY",
      "discription": "“Negativity”, yeah you heard it right. The most popular and famous word nowadays. And yes, “Negativity” is an attractive word. It gets attention more easily than positivity.",
      "keywords": [
        {
          "id": 0,
          "words": "Negativity"
        },
        {
          "id": 1,
          "words": "explore"
        },
        {
          "id": 2,
          "words": "nowadays"
        }
      ]
    }
  ]
}